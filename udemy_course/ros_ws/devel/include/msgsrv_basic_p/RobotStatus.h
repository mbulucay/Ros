// Generated by gencpp from file msgsrv_basic_p/RobotStatus.msg
// DO NOT EDIT!


#ifndef MSGSRV_BASIC_P_MESSAGE_ROBOTSTATUS_H
#define MSGSRV_BASIC_P_MESSAGE_ROBOTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace msgsrv_basic_p
{
template <class ContainerAllocator>
struct RobotStatus_
{
  typedef RobotStatus_<ContainerAllocator> Type;

  RobotStatus_()
    : motor1_rpm(0)
    , motor2_rpm(0)
    , motor3_rpm(0)
    , motor4_rpm(0)
    , location()  {
    }
  RobotStatus_(const ContainerAllocator& _alloc)
    : motor1_rpm(0)
    , motor2_rpm(0)
    , motor3_rpm(0)
    , motor4_rpm(0)
    , location(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _motor1_rpm_type;
  _motor1_rpm_type motor1_rpm;

   typedef int16_t _motor2_rpm_type;
  _motor2_rpm_type motor2_rpm;

   typedef int16_t _motor3_rpm_type;
  _motor3_rpm_type motor3_rpm;

   typedef int16_t _motor4_rpm_type;
  _motor4_rpm_type motor4_rpm;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _location_type;
  _location_type location;





  typedef boost::shared_ptr< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStatus_

typedef ::msgsrv_basic_p::RobotStatus_<std::allocator<void> > RobotStatus;

typedef boost::shared_ptr< ::msgsrv_basic_p::RobotStatus > RobotStatusPtr;
typedef boost::shared_ptr< ::msgsrv_basic_p::RobotStatus const> RobotStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator1> & lhs, const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator2> & rhs)
{
  return lhs.motor1_rpm == rhs.motor1_rpm &&
    lhs.motor2_rpm == rhs.motor2_rpm &&
    lhs.motor3_rpm == rhs.motor3_rpm &&
    lhs.motor4_rpm == rhs.motor4_rpm &&
    lhs.location == rhs.location;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator1> & lhs, const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgsrv_basic_p

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26fb00c2a9a55416e3fc28ca9efe50fa";
  }

  static const char* value(const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26fb00c2a9a55416ULL;
  static const uint64_t static_value2 = 0xe3fc28ca9efe50faULL;
};

template<class ContainerAllocator>
struct DataType< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgsrv_basic_p/RobotStatus";
  }

  static const char* value(const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 motor1_rpm\n"
"int16 motor2_rpm\n"
"int16 motor3_rpm\n"
"int16 motor4_rpm\n"
"geometry_msgs/Vector3 location\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor1_rpm);
      stream.next(m.motor2_rpm);
      stream.next(m.motor3_rpm);
      stream.next(m.motor4_rpm);
      stream.next(m.location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgsrv_basic_p::RobotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgsrv_basic_p::RobotStatus_<ContainerAllocator>& v)
  {
    s << indent << "motor1_rpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor1_rpm);
    s << indent << "motor2_rpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor2_rpm);
    s << indent << "motor3_rpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor3_rpm);
    s << indent << "motor4_rpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor4_rpm);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGSRV_BASIC_P_MESSAGE_ROBOTSTATUS_H
